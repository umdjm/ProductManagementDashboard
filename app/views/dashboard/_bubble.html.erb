
<div id="charts" class="row">
  <div id="<%= chartID %>" class="chart span6">
    <strong>Average Competitive Prices</strong>
  </div>
  <div class="chart span3">

    <div id="<%= chartID %>2"><strong>Part Category Filter</strong></div>

    <div id="<%= chartID %>3"><strong>Competition Filter</strong></div>
  </div>
</div>

<div class="row">
  <div class="span12">

    <div id="tablecontainer">
      <table id="dc-table-graph" class="list table table-striped table-bordered">
        <thead>
        <tr>
          <th>Competition Name</th>
          <th>Part Number</th>
          <th>Month</th>
          <th>Price</th>
          <th>Competitive Price</th>
          <th>Part Category</th>
        </tr>
        </thead>
      </table>
    </div>

    <script type="text/javascript">

        var scatterChartExample = {
            initChart: function(ibis_data)
            {
                var chart = dc.bubbleChart("#<%= chartID %>");
                var chart2 = dc.rowChart("#<%= chartID %>2");
                var chart3 = dc.rowChart("#<%= chartID %>3");

                var ndx             = crossfilter(ibis_data),
                        priceDimension  = ndx.dimension(function(d) {return d.part_number; }),
                        priceGroup = priceDimension.group().reduce(
                                function (p, v) {
                                    ++p.count;
                                    p.part_category = v.part_category;
                                    p.sumPrice += v.price;
                                    p.sumCompetitivePrice += v.competitive_price;
                                    p.avgPrice = p.sumPrice/p.count;
                                    p.avgCompetitivePrice = p.sumCompetitivePrice/p.count;
                                    return p;
                                },
                                function (p, v) {
                                    --p.count;
                                    p.sumPrice -= v.price;
                                    p.part_category = v.part_category;
                                    p.sumCompetitivePrice -= v.competitive_price;
                                    p.avgPrice = p.count ? p.sumPrice/p.count : -100;
                                    p.avgCompetitivePrice = p.count ? p.sumCompetitivePrice : -100;
                                    return p;
                                },
                                function () {
                                    return { count:0, part_category: "", sumPrice:0, avgPrice:0, sumCompetitivePrice: 0, avgCompetitivePrice:0 };
                                }
                        ),
                        competitionDimension = ndx.dimension(function(d) {return d.competition_name;}),
                        competitionGroup     = competitionDimension.group().reduceCount(),
                        categoryDimension    = ndx.dimension(function(d) {return d.part_category;}),
                        categoryGroup        = categoryDimension.group().reduceCount();

                chart
                        .width(543)
                        .height(500)
                        .x(d3.scale.linear().domain([0,200]))
                        .y(d3.scale.linear().domain([0,200]))
                        .radiusValueAccessor(function(d) { return 1 })
                        .renderHorizontalGridLines(true)
                        .renderVerticalGridLines(true)
                        .xAxisPadding(20)
                        .yAxisPadding(20)
                        .renderLabel(false)
                        .keyAccessor(function(d) {return d.value.avgPrice })
                        .valueAccessor(function(d){ return d.value.avgCompetitivePrice })

                        .colorAccessor(function(d) { return d.value.part_category; })
                        .yAxisLabel("Average Competitive Price")
                        .xAxisLabel("Motorcraft Price")
                        .dimension(priceDimension)
                        .group(priceGroup)
                        .renderTitle(true)
                        .title(function (d) {
                            return [
                                "Part Number: " + d.key,
                                "Part Category: " + d.value.part_category,
                                "Price: $" + d3.round(d.value.avgPrice, 2),
                                "Average Competitive Price: $" + d3.round(d.value.avgCompetitivePrice, 2),
                                "Count:" + d.value.count
                            ].join("\n");
                        });

                chart2
                        .width(300)
                        .height(220)
                        .margins({top: 5, left: 10, right: 10, bottom: 20})
                        .dimension(categoryDimension)
                        .group(categoryGroup)
                        .colors(d3.scale.category10())
                        .elasticX(true)
                        .xAxis().ticks(4);

                chart3
                        .width(300)
                        .height(220)
                        .margins({top: 5, left: 10, right: 10, bottom: 20})
                        .dimension(competitionDimension)
                        .group(competitionGroup)
                        .colors(d3.scale.category10())
                        .elasticX(true)
                        .xAxis().ticks(4);

                var dateFormat = d3.time.format("%b %Y");

                dc.dataTable("#dc-table-graph")
                        .dimension(priceDimension)
                        .group(function(d) {return ""})
                        .columns(
                                [
                                    function(d){
                                        return d.competition_name;
                                    },
                                    function(d){
                                        return d.part_number;
                                    },
                                    function(d){
                                        return dateFormat(d.month);
                                    },
                                    function(d){
                                        return d.price;
                                    },
                                    function(d){
                                        return d.competitive_price;
                                    },
                                    function(d){
                                        return d.part_category;
                                    }])
                        .sortBy(function(d){
                            return d.price;
                        });


                dc.renderAll();

                $( "#redraw" ).click(function() {
                    alert(chart2.filters());
                });
            },

            initialize: function()
            {
                $.ajax({
                    type: "GET",
                    dataType: "json",
                    async: false,
                    url: "/retrieve_data",
                    success: function(data){
                        var dateFormat = d3.time.format("%Y-%m-%d");
                        data.forEach(function (d) {
                            d.part_number = d.part_number;
                            d.month = d3.time.month(dateFormat.parse(d.month));
                            d.competitive_price = +d.competitive_price;
                            d.price = +d.price;
                            d.part_category = d.part_category;
                        });
                        scatterChartExample.initChart(data);
                    }
                });
            }
        };
        scatterChartExample.initialize();
    </script>