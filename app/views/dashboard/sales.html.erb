
<div id="charts" class="row">
  <div class="chart span12">
    <strong>Sales</strong>
  </div>
</div>
<div id="charts" class="row">
  <div id="SalesChart" class="chart span12">
  </div>
</div>

<div class="row">
<div class="span12">
  <div id="tablecontainer">
    <table id="dc-data-table" class="list table table-striped table-bordered">
      <thead>
      <tr>
        <th data-dynatable-column="part_category">Part Category</th>
        <th data-dynatable-column="key">Part Number</th>
        <th data-dynatable-column="sum">Cumulative Revenue</th>
        <th data-dynatable-column="quantity">Cumulative Quantity</th>
      </tr>
      </thead>
    </table>
  </div>
</div>


<script type="text/javascript">

    var chart, ndx, partDimension, partGroup, brush;
    var salesChart = {
        clearFilters: function()
        {
            dc.filterAll();
            dc.redrawAll();
        },
        initChart: function(data)
        {
            var addC = function(p, d){
                        p.count++;
                        p.part_category = d.part_category;
                        p.sum += d.retail_revenue;
                        p.quantity += d.retail_quantity;
                        return p;
                    },
                remC = function(p, d){
                    p.count--;
                    p.part_category = d.part_category;
                    p.sum -= d.retail_revenue;
                    p.quantity -= d.retail_quantity;
                    return p;
                },
                ini = function(){
                    return {count: 0, sum: 0, quantity: 0, part_category: ""};
                },
                order = function(p){
                    return -p.sum;
                };

            var dateFormat = d3.time.format("%b");

            var ndx                 = crossfilter(data),

                saleDimension       = ndx.dimension(function(d) {return [d.from_date, d.part_number]; }),
                saleGroup           = saleDimension.group().reduce(addC, remC, ini),
                chart               = dc.seriesChart("#SalesChart"),

                partDimension       = ndx.dimension(function(d) {return d.part_number; }),
                partGroup           = partDimension.group().reduce(addC, remC, ini),

                extent              = d3.extent(data, function(d){return d.from_date;});

            chart
                    .width(1000)
                    .height(400)
                    .margins({left: 40, right: 30, top: 0, bottom: 40})
                    .dimension(saleDimension)
                    .group(saleGroup)
                    .seriesAccessor(function(d) { return d.key[1]; })
                    .keyAccessor(function(d) {return d.key[0];})
                    .valueAccessor(function(d) {return d.value.sum})
                    .elasticY(true)
                    .elasticX(true)
                    .shareColors(true)
                    .colors(d3.scale.ordinal().range(["#ff7f0e", "#2ca02c", "#d62728", "#1f77b4"]))
                    .colorDomain(["OE MOTORCRAFT ROTOR AND DRUM", "BRAKE DRUM ASSEMBLIES", "HUB ASSEMBLIES", "MOTORCRAFT NON-RETAIL ROTOR & DRUM"])
                    .colorAccessor(function(d) {
                        if(d.data != null)
                            return d.data.value.part_category;
                        else return d[0].data.value.part_category;
                    })
                    .xAxisLabel("Month")
                    .yAxisLabel("Sales")
                    .xUnits(d3.time.months)
                    .x(d3.time.scale().domain(extent))
                    .renderHorizontalGridLines(true)
                    .renderVerticalGridLines(true)
                    .brushOn(false)
                    .renderTitle(true)
                    .title(function (d) {
                        return [
                            "Month: " + dateFormat(d.key[0]),
                            "Part Number: " + d.key[1],
                            "Part Category: " + d.value.part_category,
                            "Retail Revenue: $" + d3.round(d.value.sum, 2),
                            "Count: " + d.value.count
                        ].join("\n");
                    });
            chart.xAxis().tickFormat(function(v) {return dateFormat(v);});

            accounting.settings.currency.format = {
                pos : "%s%v",
                neg : "(%s%v)",
                zero: "%s%v"
            };
            chart.yAxis().tickFormat(function(v) {return accounting.formatMoney(v, "$", 0);});

            var tableData = partGroup.top(Infinity);
            tableData.forEach(function (d) {
                d.part_category = d.value.part_category;
                d.sum = Math.round(d.value.sum * 100)/100;
                d.quantity = d.value.quantity;
            });
            $('#dc-data-table').dynatable({
                dataset: {
                    records: tableData,
                    perPageDefault: 5,
                    perPageOptions: [5, 10, 15]
                }
            });

            dc.renderAll();
            function updateChart(e, rows) {
                var part_numbers = [];
                $("#dc-data-table tbody tr td:nth-child(2)").each(function () {
                    var part_number = $(this).text();
                    part_numbers.push(part_number);
                });

                partDimension.filter(function(d){
                    if($.inArray(d, part_numbers) >= 0)
                        return true;
                    return false;
                });
                $("#dc-data-table tbody tr td:nth-child(2)").click(function(){
                    var part_number = $(this).text();
                    $("#dynatable-query-search-dc-data-table").val(part_number);
                    e = $.Event('keypress');
                    e.which = 13;
                    $("#dynatable-query-search-dc-data-table").trigger(e);
                });

                function isNotEmpty(element) {
                    return element.value.count > 0;
                }

                chart.data(function(group) {
                    return group.top(Infinity).filter(isNotEmpty);

                });

                dc.redrawAll();
            }



            $('#dc-data-table').bind('dynatable:afterUpdate', updateChart);
            updateChart();

        },
        initialize: function()
        {
            $.ajax({
                type: "GET",
                dataType: "json",
                async: false,
                url: "/retrieve_sales_data",
                success: function(data){
                    var dateFormat = d3.time.format("%Y-%m-%dT%XZ");
                    data.forEach(function (d) {
                        //part_number
                        //part_category
                        d.from_date         = d3.time.month(dateFormat.parse(d.from_date));
                        d.dealer_price      = +d.dealer_price;
                        d.gross_quantity    = +d.gross_quantity;
                        d.gross_revenue     = +d.gross_revenue;
                        d.id                = +d.id;
                        d.retail_quantity   = +d.retail_quantity;
                        d.retail_revenue    = +d.retail_revenue;
                    });
                    salesChart.initChart(data);
                }
            });
        }
    };
    salesChart.initialize();

</script>