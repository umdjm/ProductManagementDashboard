
<div id="charts" class="row">
  <div id="<%= chartID %>" class="chart span4">
    <strong>Average Competitive Prices</strong>
  </div>
</div>

<script type="text/javascript">

    var scatterChartExample = {
        initChart: function(ibis_data)
        {
            var timeExtent = d3.extent(ibis_data, function(d) { return d.month});
            var chart = dc.bubbleChart("#<%= chartID %>");

            var ndx             = crossfilter(ibis_data),
                    priceDimension  = ndx.dimension(function(d) {return d.part_number; }),
                    priceGroup = priceDimension.group().reduce(
                            function (p, v) {
                                ++p.count;
                                p.part_category = v.part_category;
                                p.sumPrice += v.price;
                                p.sumCompetitivePrice += v.competitive_price;
                                p.avgPrice = p.sumPrice/p.count;
                                p.avgCompetitivePrice = p.sumCompetitivePrice/p.count;
                                return p;
                            },
                            function (p, v) {
                                --p.count;
                                p.sumPrice -= v.price;
                                p.part_category = v.part_category;
                                p.sumCompetitivePrice -= v.competitive_price;
                                p.avgPrice = p.count ? p.sumPrice/p.count : 0;
                                p.avgCompetitivePrice = p.count ? p.sumCompetitivePrice : 0;
                                return p;
                            },
                            function () {
                                return { count:0, part_category: "", sumPrice:0, avgPrice:0, sumCompetitivePrice: 0, avgCompetitivePrice:0 };
                            }
                    );

            var maxValue = d3.max(priceGroup.all(), function (d) {
                return Math.max(d.value.avgCompetitivePrice, d.value.avgPrice);
            });
            maxValue = Math.round(maxValue/10 + 1) * 10;

            chart
                    .width(<%= chartWidth %>)
                    .height(<%= chartHeight %>)
                    .x(d3.scale.linear().domain([0,maxValue]))
                    .y(d3.scale.linear().domain([0,maxValue]))
                    .radiusValueAccessor(function(d) {
                        if(d.value.count === 0)
                            return 0;
                        else return 1;})
                    .renderHorizontalGridLines(true)
                    .renderVerticalGridLines(true)
                    .xAxisPadding(5)
                    .yAxisPadding(5)
                    .renderLabel(false)
                    .keyAccessor(function(d) {return d.value.avgPrice })
                    .valueAccessor(function(d){ return d.value.avgCompetitivePrice })
                    .colors(d3.scale.ordinal().domain(["OE MOTORCRAFT ROTOR AND DRUM", "BRAKE DRUM ASSEMBLIES", "HUB ASSEMBLIES", "MOTORCRAFT NON-RETAIL ROTOR & DRUM"]).range(["#ff7f0e", "#2ca02c", "#d62728", "#1f77b4"]))
                    .colorAccessor(function(d) { return d.value.part_category; })
                    .yAxisLabel("Competitive Price")
                    .xAxisLabel("Motorcraft Price")
                    .dimension(priceDimension)
                    .group(priceGroup)
                    .renderTitle(true)
                    .title(function (d) {
                        return [
                            "Part Number: " + d.key,
                            "Part Category: " + d.value.part_category,
                            "Price: $" + d3.round(d.value.avgPrice, 2),
                            "Average Competitive Price: $" + d3.round(d.value.avgCompetitivePrice, 2),
                            "Count:" + d.value.count
                        ].join("\n");
                    });
            chart.xAxis().ticks(4);
            chart.yAxis().ticks(4)

            chart.renderlet(function (chart) {
                dc.events.trigger(function () {
                    var maxValue = d3.max(priceGroup.all(), function (d) {
                        return Math.max(d.value.avgCompetitivePrice, d.value.avgPrice);
                    });
                    maxValue = Math.round(maxValue/10 + 1) * 10;
                    chart.yAxis().scale(d3.scale.linear().domain([0,maxValue]).range(chart.yAxis().scale().range()));
                    chart.y(d3.scale.linear().domain([0, maxValue]));
                    chart.renderYAxis(chart.g());
                    chart.xAxis().scale(d3.scale.linear().domain([0,maxValue]).range(chart.xAxis().scale().range()));
                    chart.x(d3.scale.linear().domain([0, maxValue]));
                    chart.renderXAxis(chart.g());
                    chart.redraw();
                });
            });

            chart.render();
        },

        initialize: function()
        {
            $.ajax({
                type: "GET",
                dataType: "json",
                async: false,
                url: "/retrieve_data",
                success: function(data){
                    var dateFormat = d3.time.format("%Y-%m-%d");
                    data.forEach(function (d) {
                        d.part_number = d.part_number;
                        d.month = d3.time.month(dateFormat.parse(d.month));
                        d.competitive_price = +d.competitive_price;
                        d.price = +d.price;
                        d.part_category = d.part_category;
                    });
                    scatterChartExample.initChart(data);
                }
            });
        }
    };
    $( document ).ready(function() {
        scatterChartExample.initialize();
    });
</script>